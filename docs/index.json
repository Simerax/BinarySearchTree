{"repository_name":"github.com/Simerax/BinarySearchTree","body":"# BinarySearchTree\n\nBST written in Crystal.\nThis repository does only exist for me to learn the Crystal Programming language and learn about Binary Search Trees.\nCode Quality is poor and will probably continue to be.\n\n\n## Contributors\n\n- [Simerax](https://github.com/Simerax) - creator and maintainer\n","program":{"html_id":"github.com/Simerax/BinarySearchTree/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Simerax/BinarySearchTree","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Simerax/BinarySearchTree/BinarySearchTree","path":"BinarySearchTree.html","kind":"module","full_name":"BinarySearchTree","name":"BinarySearchTree","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"BinarySearchTree.cr","line_number":2,"url":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr"}],"repository_name":"github.com/Simerax/BinarySearchTree","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"TODO: Write documentation for `BinarySearchTree`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"BinarySearchTree.html\">BinarySearchTree</a></code></p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Simerax/BinarySearchTree/BinarySearchTree/Node","path":"BinarySearchTree/Node.html","kind":"class","full_name":"BinarySearchTree::Node(T)","name":"Node","abstract":false,"superclass":{"html_id":"github.com/Simerax/BinarySearchTree/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Simerax/BinarySearchTree/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Simerax/BinarySearchTree/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"BinarySearchTree.cr","line_number":20,"url":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr"}],"repository_name":"github.com/Simerax/BinarySearchTree","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Simerax/BinarySearchTree/BinarySearchTree","kind":"module","full_name":"BinarySearchTree","name":"BinarySearchTree"},"doc":"The Node Class is used to create Binary Trees.\nEvery Node holds *data*.\nEvery Node can have a *left* and a *right* child.\nNon existing Childs are **nil**\n\n```\nroot = BinarySearchTree::Node(Int32).new(15)\nroot.insert(5)        # will be the left child of root\nroot.insert(20)       # will be the right child of root\nroot.insert(18)       # will be the left child of '20'\nroot.find(20)         # => BinarySearchTree::Node(Int32)\nroot.find(256)        # => nil\nroot.delete_node(18)  # => true\nroot.delete_node(256) # => false\n```","summary":"<p>The Node Class is used to create Binary Trees.</p>","class_methods":[],"constructors":[{"id":"new(data,parent=nil)-class-method","html_id":"new(data,parent=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"parent","doc":null,"default_value":"nil","external_name":"parent","restriction":""}],"args_string":"(data, parent = <span class=\"n\">nil</span>)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L33","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L33","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"parent","doc":null,"default_value":"nil","external_name":"parent","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Node(T).allocate\n_.initialize(data, parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:T-instance-method","html_id":"data:T-instance-method","name":"data","doc":"*data* which is being hold by the `Node(T)`","summary":"<p><em>data</em> which is being hold by the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[],"args_string":" : T","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L31","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L31","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@data"}},{"id":"data=(data:T)-instance-method","html_id":"data=(data:T)-instance-method","name":"data=","doc":"*data* which is being hold by the `Node(T)`","summary":"<p><em>data</em> which is being hold by the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"}],"args_string":"(data : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L31","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L31","def":{"name":"data=","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data = data"}},{"id":"delete_node(val:T)-instance-method","html_id":"delete_node(val:T)-instance-method","name":"delete_node","doc":"deletes the `Node(T)` with the given *val*. This method does only delete the specific `Node(T)` and not the childs/subtree of the given `Node(T)`\n\n\n\n```\nroot = BinarySearchTree::Node(Int32).new(5)\nroot.insert(4)\n\nroot.delete_node(4) # => true\nroot.delete_node(4) # => false\n```\n","summary":"<p>deletes the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code> with the given <em>val</em>.</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"args_string":"(val : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L194","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L194","def":{"name":"delete_node","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ntd = self.find(val)\n  if (ntd.left == nil) && (ntd.right == nil)\n    ntd.remove_parent_relation\n    ntd = nil\n    GC.collect\n    return true\n  else\n    if (ntd.left != nil) && (ntd.right == nil)\n      ntd.remove_parent_relation\n      if par = ntd.parent\n        if left_child = ntd.left\n          par.insert(left_child)\n          ntd = nil\n          GC.collect\n          return true\n        else\n          return false\n        end\n      end\n    else\n      if (ntd.left == nil) && (ntd.right != nil)\n        ntd.remove_parent_relation\n        if par = ntd.parent\n          if right_child = ntd.right\n            par.insert(right_child)\n            ntd = nil\n            GC.collect\n            return true\n          else\n            return false\n          end\n        end\n      else\n        if (ntd.left != nil) && (ntd.right != nil)\n          if r_child = ntd.right\n            smallest_node = r_child.find_smallest_child\n            ntd.data = smallest_node.data\n            smallest_node.remove_parent_relation\n            if smallest_node_right_child = smallest_node.right\n              ntd.right = smallest_node_right_child\n              smnr_parent = ntd\n            end\n            smallest_node = nil\n            GC.collect\n            return true\n          else\n            return false\n          end\n        end\n      end\n    end\n  end\nend\nreturn false\n"}},{"id":"find(val:T)-instance-method","html_id":"find(val:T)-instance-method","name":"find","doc":"Finds an Element in the tree by the *data* it contains\n\nIn case the element is not found **nil** is returned\n\n```\nroot = BinarySearchTree::Node(Int32).new(15)\nroot.insert(20)\nroot.insert(26)\nroot.insert(22)\nroot.find(26)  # => BinarySearchTree::Node(Int32)\nroot.find(256) # => nil\n```","summary":"<p>Finds an Element in the tree by the <em>data</em> it contains</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"args_string":"(val : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L120","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L120","def":{"name":"find","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if root = self\n  while root\n    if root.data == val\n      return root\n    else\n      if val < root.data\n        if left_child = root.left\n          root = left_child\n        else\n          return nil\n        end\n      else\n        if val > root.data\n          if right_child = root.right\n            root = right_child\n          else\n            return nil\n          end\n        end\n      end\n    end\n  end\nelse\n  return nil\nend"}},{"id":"find_recursive(val:T)-instance-method","html_id":"find_recursive(val:T)-instance-method","name":"find_recursive","doc":"Recursive version of the `find` method","summary":"<p>Recursive version of the <code><a href=\"../BinarySearchTree/Node.html#find%28val%3AT%29-instance-method\">#find</a></code> method</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"args_string":"(val : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L145","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L145","def":{"name":"find_recursive","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.data == val\n  return self\nelse\n  if val <= self.data\n    if left = @left\n      return left.find(val)\n    else\n      return nil\n    end\n  else\n    if right = @right\n      return right.find(val)\n    else\n      return nil\n    end\n  end\nend"}},{"id":"find_smallest_child-instance-method","html_id":"find_smallest_child-instance-method","name":"find_smallest_child","doc":"Finds the smallest child of the given `Node(T)`","summary":"<p>Finds the smallest child of the given <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L260","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L260","def":{"name":"find_smallest_child","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if left = @left\n  return left.find_smallest_child\nelse\n  return self\nend"}},{"id":"insert(val:T)-instance-method","html_id":"insert(val:T)-instance-method","name":"insert","doc":"Inserts a new element into the tree\n\n\nInsertion is done by finding a `Node(T)` which does not have a child yet and appending it to that one (by creating a new `Node(T)`)\nThe Child is being inserted in the *left* child if the data is smaller then the one of the current `Node(T)` otherwise in the *right* one\n\n```\nroot = BinarySearchTree::Node(Int32).new(15)\nroot.insert(5)\n```","summary":"<p>Inserts a new element into the tree</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"args_string":"(val : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L48","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L48","def":{"name":"insert","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"insert(Node(T).new(val))"}},{"id":"insert(node:BinarySearchTree::Node(T))-instance-method","html_id":"insert(node:BinarySearchTree::Node(T))-instance-method","name":"insert","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"args_string":"(node : BinarySearchTree::Node(T))","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L52","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L52","def":{"name":"insert","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if root = self\n  while root\n    if root.data == node.data\n      return false\n    else\n      if node.data < root.data\n        if left_child = root.left\n          root = left_child\n        else\n          root.left = node\n          node.parent = root\n          return true\n        end\n      else\n        if node.data > root.data\n          if right_child = root.right\n            root = right_child\n          else\n            root.right = node\n            node.parent = root\n            return true\n          end\n        end\n      end\n    end\n  end\nend\nreturn false\n"}},{"id":"insert_recursive(val:T)-instance-method","html_id":"insert_recursive(val:T)-instance-method","name":"insert_recursive","doc":"Recursive Version of the `insert` method","summary":"<p>Recursive Version of the <code><a href=\"../BinarySearchTree/Node.html#insert%28val%3AT%29-instance-method\">#insert</a></code> method</p>","abstract":false,"args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"args_string":"(val : T)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L80","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L80","def":{"name":"insert_recursive","args":[{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"insert_recursive(Node(T).new(val))"}},{"id":"insert_recursive(node:BinarySearchTree::Node(T))-instance-method","html_id":"insert_recursive(node:BinarySearchTree::Node(T))-instance-method","name":"insert_recursive","doc":null,"summary":null,"abstract":false,"args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"args_string":"(node : BinarySearchTree::Node(T))","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L84","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L84","def":{"name":"insert_recursive","args":[{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"Node(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (self == node) || (self.data == node.data)\n  return false\nelse\n  if node.data <= self.data\n    if left = @left\n      return left.insert(node)\n    else\n      @left = node\n      node.parent = self\n      return true\n    end\n  else\n    if right = @right\n      return right.insert(node)\n    else\n      @right = node\n      node.parent = self\n      return true\n    end\n  end\nend"}},{"id":"left:BinarySearchTree::Node(T)?-instance-method","html_id":"left:BinarySearchTree::Node(T)?-instance-method","name":"left","doc":"*left* child of the `Node(T)`","summary":"<p><em>left</em> child of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[],"args_string":" : BinarySearchTree::Node(T)?","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L22","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L22","def":{"name":"left","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T) | Nil","visibility":"Public","body":"@left"}},{"id":"left=(left:BinarySearchTree::Node(T)?)-instance-method","html_id":"left=(left:BinarySearchTree::Node(T)?)-instance-method","name":"left=","doc":"*left* child of the `Node(T)`","summary":"<p><em>left</em> child of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"Node(T) | Nil"}],"args_string":"(left : BinarySearchTree::Node(T)?)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L22","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L22","def":{"name":"left=","args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"Node(T) | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@left = left"}},{"id":"parent:BinarySearchTree::Node(T)?-instance-method","html_id":"parent:BinarySearchTree::Node(T)?-instance-method","name":"parent","doc":"*parent* of the `Node(T)`","summary":"<p><em>parent</em> of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[],"args_string":" : BinarySearchTree::Node(T)?","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L28","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L28","def":{"name":"parent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T) | Nil","visibility":"Public","body":"@parent"}},{"id":"parent=(parent:BinarySearchTree::Node(T)?)-instance-method","html_id":"parent=(parent:BinarySearchTree::Node(T)?)-instance-method","name":"parent=","doc":"*parent* of the `Node(T)`","summary":"<p><em>parent</em> of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"Node(T) | Nil"}],"args_string":"(parent : BinarySearchTree::Node(T)?)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L28","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L28","def":{"name":"parent=","args":[{"name":"parent","doc":null,"default_value":"","external_name":"parent","restriction":"Node(T) | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parent = parent"}},{"id":"remove_parent_relation-instance-method","html_id":"remove_parent_relation-instance-method","name":"remove_parent_relation","doc":"NO NO NO | Should never be called directly! | NO NO NO\n\nNO NO NO","summary":"<p>NO NO NO | Should never be called directly! | NO NO NO</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L168","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L168","def":{"name":"remove_parent_relation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.parent != nil\n  if par = self.parent\n    if par.left == self\n      par.left = nil\n    else\n      if par.right == self\n        par.right = nil\n      else\n        raise(\"Node has a parent but the parent does not have the given node as child!\")\n      end\n    end\n  end\nend"}},{"id":"right:BinarySearchTree::Node(T)?-instance-method","html_id":"right:BinarySearchTree::Node(T)?-instance-method","name":"right","doc":"*right* child of the `Node(T)`","summary":"<p><em>right</em> child of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[],"args_string":" : BinarySearchTree::Node(T)?","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L25","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L25","def":{"name":"right","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Node(T) | Nil","visibility":"Public","body":"@right"}},{"id":"right=(right:BinarySearchTree::Node(T)?)-instance-method","html_id":"right=(right:BinarySearchTree::Node(T)?)-instance-method","name":"right=","doc":"*right* child of the `Node(T)`","summary":"<p><em>right</em> child of the <code><a href=\"../BinarySearchTree/Node.html\">Node</a>(T)</code></p>","abstract":false,"args":[{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":"Node(T) | Nil"}],"args_string":"(right : BinarySearchTree::Node(T)?)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L25","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L25","def":{"name":"right=","args":[{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":"Node(T) | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@right = right"}},{"id":"traverse_inorder(&block:BinarySearchTree::Node(T)->Nil)-instance-method","html_id":"traverse_inorder(&amp;block:BinarySearchTree::Node(T)-&gt;Nil)-instance-method","name":"traverse_inorder","doc":"traverses the tree in 'inorder' (sorted from smallest to largest). *&block* is called on every `Node(T)`","summary":"<p>traverses the tree in 'inorder' (sorted from smallest to largest).</p>","abstract":false,"args":[],"args_string":"(&block : BinarySearchTree::Node(T) -> Nil)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L280","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L280","def":{"name":"traverse_inorder","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Node(T) -> Nil)"},"return_type":"","visibility":"Public","body":"if left = @left\n  left.traverse_inorder(&block)\nend\nblock.call(self)\nif right = @right\n  right.traverse_inorder(&block)\nend\n"}},{"id":"traverse_postorder(&block:BinarySearchTree::Node(T)->Nil)-instance-method","html_id":"traverse_postorder(&amp;block:BinarySearchTree::Node(T)-&gt;Nil)-instance-method","name":"traverse_postorder","doc":"traverses the tree in 'postorder'. *&block* is called on every `Node(T)`","summary":"<p>traverses the tree in 'postorder'.</p>","abstract":false,"args":[],"args_string":"(&block : BinarySearchTree::Node(T) -> Nil)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L291","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L291","def":{"name":"traverse_postorder","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Node(T) -> Nil)"},"return_type":"","visibility":"Public","body":"if left = @left\n  left.traverse_postorder(&block)\nend\nif right = @right\n  right.traverse_postorder(&block)\nend\nblock.call(self)\n"}},{"id":"traverse_preorder(&block:BinarySearchTree::Node(T)->Nil)-instance-method","html_id":"traverse_preorder(&amp;block:BinarySearchTree::Node(T)-&gt;Nil)-instance-method","name":"traverse_preorder","doc":"traverses the tree in 'preorder'. *&block* is called on every `Node(T)`","summary":"<p>traverses the tree in 'preorder'.</p>","abstract":false,"args":[],"args_string":"(&block : BinarySearchTree::Node(T) -> Nil)","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L269","source_link":"https://github.com/Simerax/BinarySearchTree/blob/95938b89eb0d3cbb54a5dfb289b7fc4424258b4a/src/BinarySearchTree.cr#L269","def":{"name":"traverse_preorder","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Node(T) -> Nil)"},"return_type":"","visibility":"Public","body":"block.call(self)\nif left = @left\n  left.traverse_preorder(&block)\nend\nif right = @right\n  right.traverse_preorder(&block)\nend\n"}}],"macros":[],"types":[]}]}]}}